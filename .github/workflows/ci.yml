name: Main CI

on:
  pull_request:
    branches:
      - "main"

jobs:
  all-status-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - yaml-lint
      - markdown-lint
      - shell-lint
      - action-lint
      - golang-build-check
      - golang-vet-check
      - golang-fmt-check
      - golang-test-comment-check
      - golang-test-check
    steps:
      - name: All status check
        run: echo "All status check passed"

  yaml-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-yamllint@v1.19.0
        with:
          level: warning
          yamllint_flags: "-c .yamllint ."
          fail_on_error: true

  markdown-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-markdownlint@v0.25.0
        with:
          level: warning
          fail_on_error: true

  shell-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-shellcheck@v1.27.0
        with:
          level: warning
          fail_on_error: true
      - uses: reviewdog/action-shfmt@v1.0.2
        with:
          level: warning
          fail_on_error: true

  action-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-actionlint@v1.55.0
        with:
          level: warning
          fail_on_error: true

  golang-build-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-golang
      - name: Run go build
        run: go build -v ./cmd/rapi/main.go

  golang-vet-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
      - name: Download dependencies
        shell: bash
        run: go mod download
      - name: Run go vet
        run: go vet ./...

  golang-fmt-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
      - name: Download dependencies
        shell: bash
        run: go mod download
      - name: Run go fmt
        run: go fmt ./...
      - name: Check diff
        run: |
          if [[ $(git status --porcelain) ]]; then
            git diff
            exit 1
          fi

  golang-test-comment-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
      - name: Download dependencies
        shell: bash
        run: go mod download
      - name: Run go test
        id: golang-test
        run: |
          TEST_OUT=$(go test ./... -coverpkg=./... -p=5)
          TEST_EXIT_CODE=$?
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          {
            echo "comment<<$EOF"
            printf "# Test coverage\n\n"
            if [ $TEST_EXIT_CODE -eq 0 ]; then
              printf ":white_check_mark: All tests passed successfully.\n\n"
              printf "| Status | Package | Time | Coverage |\n"
              printf "|--------|---------|------|----------|\n"
              echo "$TEST_OUT" | sed -E "s/^\?\s+/?:/g; s/^ok\s+/ok:/g; s/^\s/:/g; s/\s+/ /g; s/coverage:/::/g; s/([0-9.]+)s\s::/\:\1s\:/g; s/ of statements//g;" | sed  -e "s/in .\/...//g" | awk -F'[:]' '{ print "| " $1 " | " $2 " | " $3 " |" $4 " |"}'
            else
              printf ":red_circle: Some tests failed.\n\n"
              printf "<details>\n"
              printf "<summary>go test result</summary>\n"
              printf "\n\`\`\`\n\n"
              echo "$TEST_OUT"
              printf "\n\`\`\`\n\n"
              printf "</details>\n"
            fi
            echo "$EOF"
          } >> "$GITHUB_ENV"
          exit $TEST_EXIT_CODE
        continue-on-error: true
      - name: Create PR comment
        uses: marocchino/sticky-pull-request-comment@44e0bad81007ecff41ba26d1cbf49a0267d28e9d # v2.9.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.pull_request.number }}
          header: golang-test
          message: ${{ env.comment }}
      - name: Error check
        if: ${{ steps.golang-test.outcome != 'success' }}
        run: exit 1

  golang-test-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
      - name: Download dependencies
        shell: bash
        run: go mod download
      - name: Set up gotestfmt
        uses: gotesttools/gotestfmt-action@8b4478c7019be847373babde9300210e7de34bfb # v2.5.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run go test
        id: golang-test
        run: |
          TEST_OUT=$(go test -json -v ./... -p=5 2>&1)
          TEST_EXIT=$?
          echo "$TEST_OUT" | tee /tmp/gotest.log | gotestfmt
          exit $TEST_EXIT
        continue-on-error: true
      - uses: actions/upload-artifact@v4
        with:
          name: test-log
          path: /tmp/gotest.log
          if-no-files-found: error
      - name: Error check
        if: ${{ steps.golang-test.outcome != 'success' }}
        run: exit 1
